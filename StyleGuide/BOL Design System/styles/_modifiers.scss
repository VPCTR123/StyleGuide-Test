@import "variables";

//** Fundamental unit for many systems
//**designed to match size of grid cells correspondingly 
.cell {

    &.cel-xxs {
        width: $celXxs;
    }

    &.cel-xs {
        width: $celXs;
    }

    &.cel-sm {
        width: $celSm;
    }

    &.cel-md {
        width: $celMd;
        
    }

    &.cel-lg {
        width: $celLg;
    }

    &.cel-xl {
        width: $celXl;
    }

    &.cel-xxl {
        width: $celXxl;
    }


    &.cel-xxsMin {
        min-width: $celXxs;
    }

    &.cel-xsMin {
        min-width: $celXs;
    }

    &.cel-smMin {
        min-width: $celSm;
    }

    &.cel-mdMin {
        min-width: $celMd;
    }

    &.cel-lgMin {
        min-width: $celLg;
    }

    &.cel-xlMin {
        min-width: $celXl;
    }

    &.cel-xxlMin {
        min-width: $celXxl;
    }


    &.cel-xxsMax {
        max-width: $celXxs;
    }

    &.cel-xsMax {
        max-width: $celXs;
    }

    &.cel-smMax {
        max-width: $celSm;
    }

    &.cel-mdMax {
        max-width: $celMd;
    }

    &.cel-lgMax {
        max-width: $celLg;
    }

    &.cel-xlMax {
        max-width: $celXl;
    }

    &.cel-xxlMax {
        max-width: $celXxl;
    }
}

//** Cursor Behavior
.cursor {
    cursor: default;

    &.cur-pointer {
        cursor: pointer;
    }
}

//** Body Component - A (div) container that behaves in various ways, used to hold content.
.content {


    //** Scroll Behavior
    &.con-scrollY {
        overflow-y: scroll;
    }

    &.con-scrollY-auto {
        overflow-y: auto;
    }

    &.con-scrollX {
        overflow-y: scroll;
    }

    &.con-scrollX-auto {
        overflow-y: auto;
    }

    //max width
    &.con-xxsMax {
        max-width: calc($celXxs*2);
    }

    &.con-xsMax {
        max-width: calc($celXs*2);
    }

    &.con-smMax {
        max-width: calc($celSm*2);
    }

    &.con-mdMax {
        max-width: calc($celMd*2);
    }

    &.con-lgMax {
        max-width: calc($celLg*2);
    }

    &.con-xlMax {
        max-width: calc($celXl*2);
    }

    &.con-xxlMax {
        max-width: calc($celXxl*2);
    }

    //width
    &.con-xxs {
        width: calc($celXxs*2);
    }

    &.con-xs {
        width: calc($celXs*2);
    }

    &.con-sm {
        width: calc($celSm*2);
    }

    &.con-md {
        width: calc($celMd*2);
    }

    &.con-lg {
        width: calc($celLg*2);
    }

    &.con-xl {
        width: calc($celXl*2);
    }

    &.con-xxl {
        width: calc($celXxl*2);
    }

    //max width percent tens
    &.con-100pMax {
        max-width: 100%;
    }
 
    &.con-90pMax {
        max-width: 90%;
    }

    &.con-80pMax {
        max-width: 80%;
    }

    &.con-70pMax {
        max-width: 70%;
    }

    &.con-60pMax {
        max-width: 60%;
    }

    &.con-50pMax {
        max-width: 50%;
    }

    &.con-40pMax {
        max-width: 40%;
    }

    &.con-30pMax {
        max-width: 30%;
    }

    &.con-20pMax {
        max-width: 20%;
    }

    &.con-10pMax {
        max-width: 10%;
    }

    //max width percent quarters
    &.con-25pMax {
        max-width: 25%;
    }

    &.con-75pMax {
        max-width: 75%;
    }

    //max width percent thirds
    &.con-33pMax {
        max-width: 33.33333%;
    }

    &.con-66pMax {
        max-width: 66.66666%;
    }

    //100% both ways
    &.con-full {
        width: 100%;
        height: 100%;
    }


    //width percent tens
    &.con-100p {
        width: 100%;
    }

    &.con-90p {
        width: 90%;
    }

    &.con-80p {
        width: 80%;
    }

    &.con-70p {
        width: 70%;
    }

    &.con-60p {
        width: 60%;
    }

    &.con-50p {
        width: 50%;
    }

    &.con-40p {
        width: 40%;
    }

    &.con-30p {
        width: 30%;
    }

    &.con-20p {
        width: 20%;
    }

    &.con-10p {
        width: 10%;
    }

    //max width percent quarters
    &.con-25p {
        width: 25%;
    }

    &.con-75p {
        width: 75%;
    }

    //max width percent thirds
    &.con-33p {
        width: 33.33333%;
    }

    &.con-66p {
        width: 66.66666%;
    }

    //max width vw 10s
    &.con-100vwMax {
        max-width: 100vw;
    }

    &.con-90vwMax {
        max-width: 90vw;
    }

    &.con-80vwMax {
        max-width: 80vw;
    }

    &.con-70vwMax {
        max-width: 70vw;
    }

    &.con-60vwMax {
        max-width: 60vw;
    }

    &.con-50vwMax {
        max-width: 50vw;
    }

    &.con-40vwMax {
        max-width: 40vw;
    }

    &.con-30vwMax {
        max-width: 30vw;
    }

    &.con-20vwMax {
        max-width: 20vw;
    }

    &.con-10vwMax {
        max-width: 10vw;
    }

    //max width vw quarters
    &.con-25vwMax {
        max-width: 25vw;
    }

    &.con-75vwMax {
        max-width: 75vw;
    }


    //max width vw thirds
    &.con-33vwMax {
        max-width: 33.33333vw;
    }

    &.con-66vwMax {
        max-width: 66.66666vw;
    }


    //width vw 10s
    &.con-100vw {
        width: 100vw;
    }

    &.con-90vw {
        width: 90vw;
    }

    &.con-80vw {
        width: 80vw;
    }

    &.con-70vw {
        width: 70vw;
    }

    &.con-60vw {
        width: 60vw;
    }

    &.con-50vw {
        width: 50vw;
    }

    &.con-40vw {
        width: 40vw;
    }

    &.con-30vw {
        width: 30vw;
    }

    &.con-20vw {
        width: 20vw;
    }

    &.con-10vw {
        width: 10vw;
    }

    //width vw quarters
    &.con-25vw {
        width: 25vw;
    }

    &.con-75vw {
        width: 75vw;
    }


    //width vw thirds
    &.con-33vw {
        width: 33.33333vw;
    }

    &.con-66vw {
        width: 66.66666vw;
    }



    //heights


    //max height
    &.con-xxsMaxVr {
        max-height: calc($celXxs*2);
    }

    &.con-xsMaxVr {
        max-height: calc($celXs*2);
    }

    &.con-smMaxVr {
        max-height: calc($celSm*2);
    }

    &.con-mdMaxVr {
        max-height: calc($celMd*2);
    }

    &.con-lgMaxVr {
        max-height: calc($celLg*2);
    }

    &.con-xlMaxVr {
        max-height: calc($celXl*2);
    }

    &.con-xxlMaxVr {
        max-height: calc($celXxl*2);
    }

    //height
    &.con-xxsVr {
        height: calc($celXxs*2);
    }

    &.con-xsVr {
        height: calc($celXs*2);
    }

    &.con-smVr {
        height: calc($celSm*2);
    }

    &.con-mdVr {
        height: calc($celMd*2);
        height: 10rem !important;
    }

    &.con-lgVr {
        height: calc($celLg*2);
    }

    &.con-xlVr {
        height: calc($celXl*2);
    }

    &.con-xxlVr {
        height: calc($celXxl*2);
    }

    //max height percent tens
    &.con-100pMaxVr {
        max-height: 100%;
    }

    &.con-90pMaxVr {
        max-height: 90%;
    }

    &.con-80pMaxVr {
        max-height: 80%;
    }

    &.con-70pMaxVr {
        max-height: 70%;
    }

    &.con-60pMaxVr {
        max-height: 60%;
    }

    &.con-50pMaxVr {
        max-height: 50%;
    }

    &.con-40pMaxVr {
        max-height: 40%;
    }

    &.con-30pMaxVr {
        max-height: 30%;
    }

    &.con-20pMaxVr {
        max-height: 20%;
    }

    &.con-10pMaxVr {
        max-height: 10%;
    }

    //max height percent quarters
    &.con-25pMaxVr {
        max-height: 25%;
    }

    &.con-75pMaxVr {
        max-height: 75%;
    }

    //max height percent thirds
    &.con-33pMaxVr {
        max-height: 33.33333%;
    }

    &.con-66pMaxVr {
        max-height: 66.66666%;
    }



    //height percent tens
    &.con-100pVr {
        height: 100%;
    }

    &.con-90pVr {
        height: 90%;
    }

    &.con-80pVr {
        height: 80%;
    }

    &.con-70pVr {
        height: 70%;
    }

    &.con-60pVr {
        height: 60%;
    }

    &.con-50pVr {
        height: 50%;
    }

    &.con-40pVr {
        height: 40%;
    }

    &.con-30pVr {
        height: 30%;
    }

    &.con-20pVr {
        height: 20%;
    }

    &.con-10pVr {
        height: 10%;
    }

    //max height percent quarters
    &.con-25pVr {
        height: 25%;
    }

    &.con-75pVr {
        height: 75%;
    }

    //max height percent thirds
    &.con-33pVr {
        height: 33.33333%;
    }

    &.con-66pVr {
        height: 66.66666%;
    }

    //max height vh 10s
    &.con-100vhMax {
        max-height: 100vh;
    }

    &.con-90vhMax {
        max-height: 90vh;
    }

    &.con-80vhMax {
        max-height: 80vh;
    }

    &.con-70vhMax {
        max-height: 70vh;
    }

    &.con-60vhMax {
        max-height: 60vh;
    }

    &.con-50vhMax {
        max-height: 50vh;
    }

    &.con-40vhMax {
        max-height: 40vh;
    }

    &.con-30vhMax {
        max-height: 30vh;
    }

    &.con-20vhMax {
        max-height: 20vh;
    }

    &.con-10vhMax {
        max-height: 10vh;
    }

    //max height vh quarters
    &.con-25vhMax {
        max-height: 25vh;
    }

    &.con-75vhMax {
        max-height: 75vh;
    }


    //max height vh thirds
    &.con-33vhMax {
        max-height: 33.33333vh;
    }

    &.con-66vhMax {
        max-height: 66.66666vh;
    }


    //height vw 10s
    &.con-100vh {
        height: 100vh;
    }

    &.con-90vh {
        height: 90vh;
    }

    &.con-80vh {
        height: 80vh;
    }

    &.con-70vh {
        height: 70vh;
    }

    &.con-60vh {
        height: 60vh;
    }

    &.con-50vh {
        height: 50vh;
    }

    &.con-40vh {
        height: 40vh;
    }

    &.con-30vh {
        height: 30vh;
    }

    &.con-20vh {
        height: 20vh;
    }

    &.con-10vh {
        height: 10vh;
    }

    //height vh quarters
    &.con-25vh {
        width: 25vh;
    }

    &.con-75vh {
        width: 75vh;
    }


    //width vh thirds
    &.con-33vh {
        width: 33.33333vh;
    }

    &.con-66vh {
        width: 66.66666vh;
    }





}

//needs attention
.disabled {
    pointer-events: none;
}

//** Display Modifiers
.display {
    //** Default Block
    display: block;

    //** Display Variants
    &.dis-grid {
        display: grid;
    }

    &.dis-block {
        display: block;
    }

    &.dis-inline-block {
        display: inline-block;
    }

}

//** Align left edge
.edge-left {
    right: 100%;

    //** points to right
    &.to-right {
        right: auto;
        left: 0;
    }
}

//** Position Adjusteres
//** Align with right edge
.edge-right {
    left: 100%;

    //** Points to left
    &.to-left {
        left: auto;
        right: 0;
    }
}

//** Fade In / Out Modifier. (Apply fade class to allow)
//** Use JS or other methods to toggle classes which show and hide element with a short transition.
.fade {
    //** Default
    transition: 0;

    //** Fade out
    .fad-out {
        transition: .5s;
        opacity: 0;
    }

    //** Fade in
    .fad-in {
        transition: .5s;
        opacity: 100;
    }
}

//** Flex Modifier
.flex {

    //** Default Flex
    display: flex;

    //** Variants LEGACY NEEDS TO BE REMOVED
    &.fle-rowreverse {
        flex-direction: row-reverse;
    }

    &.fle-column {
        flex-direction: column;
    }

    &.fle-space-between {
        justify-content: space-between;
    }

    &.fle-centerHr {

        justify-content: center;
    }

    &.fle-start {
        justify-content: flex-start;

    }

    &.fle-align-start {
        align-items: start;
    }

    &.fle-end {
        justify-content: flex-end;
    }

    &.fle-one {
        flex: 1;
    }

    &.fle-centerVr {
        align-items: center;
    }

    &.fle-baseline {
        align-items: baseline;
    }


    //UPDATED NAMING

    &.fle-alignItems-baseline {
        align-items: baseline;
    }

    &.fle-alignItems-center {
        align-items: center;
    }

    &.fle-alignItems-end {
        align-items: end;
    }

    &.fle-alignItems-start {
        align-items: start;
    }

    &.fle-alignItems-flexStart {
        align-items: flex-start;
    }

    &.fle-alignItems-inherit {
        align-items: inherit;
    }

    &.fle-alignItems-stretch {
        align-items: stretch;
    }

    &.fle-alignContent-baseline {
        align-content: baseline;
    }

    &.fle-alignContent-center {
        align-content: center;
    }

    &.fle-alignContent-end {
        align-content: end;
    }

    &.fle-alignContent-start {
        align-content: start;
    }

    &.fle-alignContent-inherit {
        align-content: inherit;
    }

    &.fle-alignContent-stretch {
        align-content: stretch;
    }

    &.fle-alignContent-spaceBetween {
        align-content: space-between;
    }

    &.fle-alignContent-spaceAround {
        align-content: space-around;
    }

    &.fle-alignContent-spaceEvenly {
        align-content: space-evenly;
    }

    &.fle-alignSelf-baseline {
        align-self: baseline;
    }

    &.fle-alignSelf-center {
        align-self: center;
    }

    &.fle-alignSelf-flexEnd {
        align-self: flex-end;
    }

    &.fle-alignSelf-selfEnd {
        align-self: self-end;
    }

    &.fle-alignSelf-flexStart {
        align-self: flex-start;
    }

    &.fle-alignSelf-selfStart {
        align-self: self-start;
    }

    &.fle-alignSelf-stretch {
        align-self: stretch;
    }

    &.fle-basis-xxs {
        flex-basis: 3.125rem;
    }

    &.fle-basis-xs {
        flex-basis: 6.25rem;
    }

    &.fle-basis-sm {
        flex-basis: 12.5rem;
    }

    &.fle-basis-md {
        flex-basis: 25rem;
    }

    &.fle-basis-lg {
        flex-basis: 37.5rem;
    }

    &.fle-basis-xl {
        flex-basis: 50rem;
    }

    &.fle-basis-xxl {
        flex-basis: 75rem;
    }

    &.fle-direction-column {
        flex-direction: column;
    }

    &.fle-direction-columnReverse {
        flex-direction: column-reverse;
    }

    &.fle-direction-row {
        flex-direction: row;
    }

    &.fle-direction-rowReverse {
        flex-direction: row-reverse;
    }

    &.fle-direction-inherit {
        flex-direction: inherit;
    }

    &.fle-flow-row {
        flex-flow: row;
    }

    &.fle-flow-rowReverse {
        flex-flow: row-reverse;
    }

    &.fle-flow-column {
        flex-flow: column;
    }

    &.fle-flow-columnReverse {
        flex-flow: column-reverse;
    }

    &.fle-flow-wrap {
        flex-flow: wrap;
    }

    &.fle-flow-nowrap {
        flex-flow: nowrap;
    }

    &.fle-flow-wrapReverse {
        flex-flow: wrap-reverse;
    }

    &.fle-wrap {
        flex-wrap: wrap;
    }

    &.fle-wrapReverse {
        flex-wrap: wrap-reverse;
    }

    &.fle-nowrap {
        flex-wrap: nowrap;
    }

    &.fle-justifyContent-baseline {
        justify-content: baseline;
    }

    &.fle-justifyContent-center {
        justify-content: center;
    }

    &.fle-justifyContent-end {
        justify-content: end;
    }

    &.fle-justifyContent-start {
        justify-content: start;
    }

    &.fle-justifyContent-inherit {
        justify-content: inherit;
    }

    &.fle-justifyContent-stretch {
        justify-content: stretch;
    }

    &.fle-justifyContent-spaceBetween {
        justify-content: space-between;
    }

    &.fle-justifyContent-spaceAround {
        justify-content: space-around;
    }

    &.fle-justifyContent-spaceEvenly {
        justify-content: space-evenly;
    }
}

.float {
    &.flo-right {
        float: right;
    }
}

//** Gap Modifier
.gap {
    gap: $gap;

    &.gap-xxs {

        gap: $gapXxs;
    }

    &.gap-xs {

        gap: $gapXs;
    }

    &.gap-sm {

        gap: $gapSm;
    }

    &.gap-md {

        gap: $gapMd;
    }

    &.gap-lg {

        gap: $gapLg;
    }

    &.gap-xl {

        gap: $gapXl;
    }

    &.gap-xxl {

        gap: $gapXxl;
    }
}

//** A ghost element will only show its Background when on hover. Good for certain buttons.
.ghost:not(:hover) {

    background-color: hsla(0, 0, 0, 0) !important;

    &.gho-transXxs {
        transition: background-color .1s;
    }
}

//** Flex Grow
.grow {
    &.gro-one {
        flex-grow: 1;
    }

    &.gro-two {
        flex-grow: 2;
    }

    &.gro-three {
        flex-grow: 3;
    }

    &.gro-four {
        flex-grow: 4;
    }

    &.gro-five {
        flex-grow: 5;
    }

    &.gro-six {
        flex-grow: 6;
    }

    &.gro-seven {
        flex-grow: 7;
    }

    &.gro-eight {
        flex-grow: 8;
    }

    &.gro-nine {
        flex-grow: 9;
    }

    &.gro-ten {
        flex-grow: 10;
    }

    &.gro-half {
        flex-grow: .5;
    }

    .gro-third {
        flex-grow: .33333;
    }

    .gro-quarter {
        flex-grow: .25;
    }

    .gro-fifth {
        flex-grow: .2;
    }

    .gro-sixth {
        flex-grow: .166666;
    }

    .gro-seventh {
        flex-grow: .143;
    }

    .gro-eighth {
        flex-grow: .125;
    }

    .gro-ninth {
        flex-grow: .1111;
    }

    .gro-tenth {
        flex-grow: .1;
    }
}

//needs attention
.hide-bg {

    background-color: hsla(0, 0, 0, 0) !important;
}

.magic-wrapper {
    container: magic / inline-size;
}

$magic-classes: mag-xxs, mag-xs, mag-sm, mag-md, mag-lg, mag-xl, mag-xxl;
$magic-vars: $celXxs, $celXs, $celSm, $celMd, $celLg, $celXl, $celXxl;

@for $j from 1 through length($magic-classes) {
    $class: nth($magic-classes, $j);
    $var: nth($magic-vars, $j);

    @for $i from 1 through 8 {
        @if $i ==1 {
            @container magic (max-width: calc(#{$var} * 2)) {
                .#{$class} {
                  width: #{$var};
                }
            }
        }

        @else if $i ==8 {
            @container magic (min-width: calc(#{$var} * #{$i})) {
                .#{$class} {
                    max-width: calc(#{$var} * #{$i});
                  
                }
            }
        }

        @else {
            @container magic (width > calc(#{$var} * #{$i})) and (max-width: calc(#{$var} * #{ $i + 1})) {
                .#{$class} {
                  width: calc(#{$var} * #{$i});
                    
                }
            }
        }

        @for $max from 1 through 8 {
            .mag-#{$max}Max {
                @if $i >$max {
                    @container magic (width > calc(#{$var} * #{$max})) {
                        .#{$class} {
                           width: calc(#{$var} * #{$max});
                    
                        }
                    }
                }
            }
        }
    }
}

// @container magic (max-width: 100vw) {
//     .left-fade, .right-fade{

//         background-color: red !important;
//     }
// }
.magic {
    background-color: red;
    margin-left: auto;
    margin-right: auto;
    display: flex;
    flex-wrap: wrap;
}

//** Margin Modifier Component 
.margin {

    //** Size Variants - Use global variables to prevent inconsistencies.
    &.mar-xxs {
        margin: var(--marXxs);
    }

    &.mar-xs {
        margin: var(--marXs);
    }

    &.mar-sm {
        margin: var(--marSm);
    }

    &.mar-md {
        margin: var(--marMd);
    }

    &.mar-lg {
        margin: var(--marLg);
    }

    &.mar-xl {
        margin: var(--marXl);
    }

    &.mar-xxl {
        margin: var(--marXxl);
    }

    //** Apply margin by side
    //** Top
    &.mar-xxsT {
        margin-top: var(--marXxs);
    }

    &.mar-xsT {
        margin-top: var(--marXs);
    }

    &.mar-smT {
        margin-top: var(--marSm);
    }

    &.mar-mdT {
        margin-top: var(--marMd);
    }

    &.mar-lgT {
        margin-top: var(--marLg);
    }

    &.mar-xlT {
        margin-top: var(--marXl);
    }

    &.mar-xxlT {
        margin-top: var(--marXxl);
    }

    //** Right
    &.mar-xxsR {
        margin-right: var(--marXxs);
    }

    &.mar-xsR {
        margin-right: var(--marXs);
    }

    &.mar-smR {
        margin-right: var(--marSm);
    }

    &.mar-mdR {
        margin-right: var(--marMd);
    }

    &.mar-lgR {
        margin-right: var(--marLg);
    }

    &.mar-xlR {
        margin-right: var(--marXl);
    }

    &.mar-xxlR {
        margin-right: var(--marXxl);
    }

    //** Bottom
    &.mar-xxsB {
        margin-bottom: var(--marXxs);
    }

    &.mar-xsB {
        margin-bottom: var(--marXs);
    }

    &.mar-smB {
        margin-bottom: var(--marSm);
    }

    &.mar-mdB {
        margin-bottom: var(--marMd);
    }

    &.mar-lgB {
        margin-bottom: var(--marLg);
    }

    &.mar-xlB {
        margin-bottom: var(--marXl);
    }

    &.mar-xxlB {
        margin-bottom: var(--marXxl);
    }

    //** Left   
    &.mar-xxsL {
        margin-left: var(--marXxs);
    }

    &.mar-xsL {
        margin-left: var(--marXs);
    }

    &.mar-smL {
        margin-left: var(--marSm);
    }

    &.mar-mdL {
        margin-left: var(--marMd);
    }

    &.mar-lgL {
        margin-left: var(--marLg);
    }

    &.mar-xlL {
        margin-left: var(--marXl);
    }

    &.mar-xxlL {
        margin-left: var(--marXxl);
    }

    //** Apply Specific margin to horizontal axis.
    &.mar-xxsHr {
        margin-left: var(--marXxs);
        margin-right: var(--marXxs);
    }

    &.mar-xsHr {
        margin-left: var(--marXs);
        margin-right: var(--marXs);
    }

    &.mar-smHr {
        margin-left: var(--marSm);
        margin-right: var(--marSm);
    }

    &.mar-mdHr {
        margin-left: var(--marMd);
        margin-right: var(--marMd);
    }

    &.mar-lgHr {
        margin-left: var(--marLg);
        margin-right: var(--marLg);
    }

    &.mar-xlHr {
        margin-left: var(--marXl);
        margin-right: var(--marXl);
    }

    &.mar-xxlHr {
        margin-left: var(--marXxl);
        margin-right: var(--marXxl);
    }

    //** Apply specific margin to vertical axsis.
    &.mar-xxsVr {
        margin-top: var(--marXxs);
        margin-bottom: var(--marXxs);
    }

    &.mar-xsVr {
        margin-top: var(--marXs);
        margin-bottom: var(--marXs);
    }

    &.mar-smVr {
        margin-top: var(--marSm);
        margin-bottom: var(--marSm);
    }

    &.mar-mdVr {
        margin-top: var(--marMd);
        margin-bottom: var(--marMd);
    }

    &.mar-lgVr {
        margin-top: var(--marLg);
        margin-bottom: var(--marLg);
    }

    &.mar-xlVr {
        margin-top: var(--marXl);
        margin-bottom: var(--marXl);
    }

    &.mar-xxlVr {
        margin-top: var(--marXxl);
        margin-bottom: var(--marXxl);
    }

    //** Remove margin by side
    &.mar-noneT {
        margin-top: 0;
    }

    &.mar-noneR {
        margin-right: 0;
    }

    &.mar-noneB {
        margin-bottom: 0;
    }

    &.mar-noneL {
        margin-left: 0;
    }

    //** Remove margin Horizontally
    &.mar-noneHr {
        margin-left: 0;
        margin-right: 0;
    }

    //** Remove margin Vertically
    &.mar-noneVr {
        margin-left: 0;
        margin-right: 0;
    }

    //** Auto 
    &.mar-auto {
        margin: auto;
    }

    //** Auto Horizontal
    &.mar-autoHr {
        margin-left: auto;
        margin-right: auto;
    }

    //** Auto Vertical
    &.mar-autoVr {
        margin-top: auto;
        margin-bottom: auto;
    }

    //** Auto Cardinal
    &.mar-autoT {
        margin-top: auto;
    }

    &.mar-autoR {
        margin-right: auto;
    }

    &.mar-autoB {
        margin-bottom: auto;
    }

    &.mar-autoL {
        margin-left: auto;
    }

}

//** Padding Modifier Component 
.padding {

    //** Size Variants - Use global variables to prevent inconsistencies.
    &.pad-xxs {
        padding: var(--padXxs);
    }

    &.pad-xs {
        padding: var(--padXs);
    }

    &.pad-sm {
        padding: var(--padSm);
    }

    &.pad-md {
        padding: var(--padMd);
    }

    &.pad-lg {
        padding: var(--padLg);
    }

    &.pad-xl {
        padding: var(--padXl);
    }

    &.pad-xxl {
        padding: var(--padXxl);
    }

    //** Apply padding by side
    //** Top
    &.pad-xxsT {
        padding-top: var(--padXxs);
    }

    &.pad-xsT {
        padding-top: var(--padXs);
    }

    &.pad-smT {
        padding-top: var(--padSm);
    }

    &.pad-mdT {
        padding-top: var(--padMd);
    }

    &.pad-lgT {
        padding-top: var(--padLg);
    }

    &.pad-xlT {
        padding-top: var(--padXl);
    }

    &.pad-xxlT {
        padding-top: var(--padXxl);
    }

    //** Right
    &.pad-xxsR {
        padding-right: var(--padXxs);
    }

    &.pad-xsR {
        padding-right: var(--padXs);
    }

    &.pad-smR {
        padding-right: var(--padSm);
    }

    &.pad-mdR {
        padding-right: var(--padMd);
    }

    &.pad-lgR {
        padding-right: var(--padLg);
    }

    &.pad-xlR {
        padding-right: var(--padXl);
    }

    &.pad-xxlR {
        padding-right: var(--padXxl);
    }

    //** Bottom
    &.pad-xxsB {
        padding-bottom: var(--padXxs);
    }

    &.pad-xsB {
        padding-bottom: var(--padXs);
    }

    &.pad-smB {
        padding-bottom: var(--padSm);
    }

    &.pad-mdB {
        padding-bottom: var(--padMd);
    }

    &.pad-lgB {
        padding-bottom: var(--padLg);
    }

    &.pad-xlB {
        padding-bottom: var(--padXl);
    }

    &.pad-xxlB {
        padding-bottom: var(--padXxl);
    }

    //** Left
    &.pad-xxsL {
        padding-left: var(--padXxs);
    }

    &.pad-xsL {
        padding-left: var(--padXs);
    }

    &.pad-smL {
        padding-left: var(--padSm);
    }

    &.pad-mdL {
        padding-left: var(--padMd);
    }

    &.pad-lgL {
        padding-left: var(--padLg);
    }

    &.pad-xlL {
        padding-left: var(--padXl);
    }

    &.pad-xxlL {
        padding-left: var(--padXxl);
    }

    //** Apply Specific Padding to horizontal axis.
    &.pad-xxsHr {
        padding-left: var(--padXxs);
        padding-right: var(--padXxs);
    }

    &.pad-xsHr {
        padding-left: var(--padXs);
        padding-right: var(--padXs);
    }

    &.pad-smHr {
        padding-left: var(--padSm);
        padding-right: var(--padSm);
    }

    &.pad-mdHr {
        padding-left: var(--padMd);
        padding-right: var(--padMd);
    }

    &.pad-lgHr {
        padding-left: var(--padLg);
        padding-right: var(--padLg);
    }

    &.pad-xlHr {
        padding-left: var(--padXl);
        padding-right: var(--padXl);
    }

    &.pad-xxlHr {
        padding-left: var(--padXxl);
        padding-right: var(--padXxl);
    }

    //** Apply specific padding to vertical axsis.
    &.pad-xxsVr {
        padding-top: var(--padXxs);
        padding-bottom: var(--padXxs);
    }

    &.pad-xsVr {
        padding-top: var(--padXs);
        padding-bottom: var(--padXs);
    }

    &.pad-smVr {
        padding-top: var(--padSm);
        padding-bottom: var(--padSm);
    }

    &.pad-mdVr {
        padding-top: var(--padMd);
        padding-bottom: var(--padMd);
    }

    &.pad-lgVr {
        padding-top: var(--padLg);
        padding-bottom: var(--padLg);
    }

    &.pad-xlVr {
        padding-top: var(--padXl);
        padding-bottom: var(--padXl);
    }

    &.pad-xxlVr {
        padding-top: var(--padXxl);
        padding-bottom: var(--padXxl);
    }

    //** Remove Padding by side
    &.pad-noneT {
        padding-top: 0;
    }

    &.pad-noneR {
        padding-right: 0;
    }

    &.pad-noneB {
        padding-bottom: 0;
    }

    &.pad-noneL {
        padding-left: 0;
    }

    //** Remove Padding Horizontally
    &.pad-noneHr {
        padding-left: 0;
        padding-right: 0;
    }

    //** Remove Padding Vertically
    &.pad-noneVr {
        padding-left: 0;
        padding-right: 0;
    }

    &.pad-xsNav {
        padding-top: 1rem;
    }

    &.pad-smNav {
        padding-top: 2rem;
    }

    &.pad-mdNav {
        padding-top: 3rem;
    }

    &.pad-lgNav {
        padding-top: 4rem;
    }

    &.pad-xlNav {
        padding-top: 5rem;
    }
}

//**Used to emulate max width but with padding - works well with focus overlay
.padding-focus {
    &.padf-xxsMinHr {
        --padfMin: var(--padXxs);
    }

    &.padf-xsMinHr {
        --padfMin: var(--padXs);
    }

    &.padf-smMinHr {
        --padfMin: var(--padSm);
    }

    &.padf-mdMinHr {
        --padfMin: var(--padMd);
    }

    &.padf-lgMinHr {
        --padfMin: var(--padLg);
    }

    &.padf-xlMinHr {
        --padfMin: var(--padXl);
    }

    &.padf-xxlMinHr {
        --padfMin: var(--padXxl);
    }


    &.padf-xxsHr {
        padding-left: max(var(--padfMin), calc((100% - calc($celXxs * 2)) / 2));
    }

    &.padf-xsHr {
        padding-left: max(var(--padfMin), calc((100% - calc($celXs * 2)) / 2));
    }

    &.padf-smHr {
        padding-left: max(var(--padfMin), calc((100% - calc($celSm * 2)) / 2));
    }

    &.padf-mdHr {
        padding-left: max(var(--padfMin), calc((100% - calc($celMd * 2)) / 2));
    }

    &.padf-lgHr {
        padding-left: max(var(--padfMin), calc((100% - calc($celLg * 2)) / 2));
    }

    &.padf-xlHr {
        padding-left: max(var(--padfMin), calc((100% - calc($celXl * 2)) / 2));
    }

    &.padf-xxlHr {
        padding-left: max(var(--padfMin), calc((100% - calc($celXxl * 2)) / 2));
    }
}

//** Border Radius Modifier
.pill {
    //** Default
    border-radius: 1.5rem;

    //** Disable
    &.no-pill {
        border-radius: 0;
    }

    //** Full or circle
    &.pil-circle,
    &.pil-full {
        border-radius: 100%;
    }

    //** Variant Sizes
    &.pil-xxs {
        border-radius: .25rem;
    }

    &.pil-xs {
        border-radius: .5rem;
    }

    &.pil-sm {
        border-radius: 1rem;
    }

    &.pil-md {
        border-radius: 1.5rem;
    }

    &.pil-lg {
        border-radius: 2rem;
    }

    &.pil-xl {
        border-radius: 3rem;
    }
}

//** Position Modifiers
.position {
    //** Default Static
    position: static;

    //** Variants
    &.pos-fixed {
        position: fixed;
    }

    &.pos-sticky {
        position: sticky;
    }

    &.pos-relative {
        position: relative;
    }

    &.pos-absolute {
        position: absolute;
    }

}

//** Ring Modifier - Adds a highlighting border when mouse hovered.
.ring {
    outline-offset: .15rem;
    transition: .05s;
    outline-color: black;

    &:focus-within {
        outline: .2rem solid;
    }

    &:hover {

        outline: .2rem solid;
    }

    //Temporarily disabled

    // &:active {
    //     outline-offset: .35rem;
    //     outline: 0rem solid;
    // }

}

//** Flex Shink
.shrink {
    &.shr-one {
        flex-shrink: 1;
    }

    &.shr-two {
        flex-shrink: 2;
    }

    &.shr-three {
        flex-shrink: 3;
    }

    &.shr-four {
        flex-shrink: 4;
    }

    &.shr-five {
        flex-shrink: 5;
    }

    &.shr-six {
        flex-shrink: 6;
    }

    &.shr-seven {
        flex-shrink: 7;
    }

    &.shr-eight {
        flex-shrink: 8;
    }

    &.shr-nine {
        flex-shrink: 9;
    }

    &.shr-ten {
        flex-shrink: 10;
    }

    &.shr-half {
        flex-shrink: .5;
    }

    .shr-third {
        flex-shrink: .33333;
    }

    .shr-quarter {
        flex-shrink: .25;
    }

    .shr-fifth {
        flex-shrink: .2;
    }

    .shr-sixth {
        flex-shrink: .166666;
    }

    .shr-seventh {
        flex-shrink: .143;
    }

    .shr-eighth {
        flex-shrink: .125;
    }

    .shr-ninth {
        flex-shrink: .1111;
    }

    .shr-tenth {
        flex-shrink: .1;
    }
}

//** User Select Modifier
.text-select {
    //** Default
    user-select: auto;

    //** Variants
    &.texs-none {
        user-select: none;
    }
}

//** Text Align
.text-align {
    &.texa-r {
        text-align: right;

    }

    &.texa-c {
        text-align: center;

    }

}

//** Text Wrap
.text-wrap {
    text-wrap: wrap;

    &.texw-wrap {
        text-wrap: wrap;
    }

    &.texw-nowrap {
        text-wrap: nowrap !important;
    }
}